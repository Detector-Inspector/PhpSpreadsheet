<?php

namespace PhpOffice\PhpSpreadsheetTests\Reader;

use PhpOffice\PhpSpreadsheet\Cell\Coordinate;
use PhpOffice\PhpSpreadsheet\Document\Properties;
use PhpOffice\PhpSpreadsheet\Reader\Xlsx;
use PhpOffice\PhpSpreadsheet\Shared\File;
use PHPUnit\Framework\TestCase;

class XlsxTest extends TestCase
{
    public function testLoadXlsxWorkbookProperties()
    {
        $filename = './data/Reader/XLSX/propertyTest.xlsx';
        $reader = new Xlsx();
        $spreadsheet = $reader->load($filename);

        $properties = $spreadsheet->getProperties();
        // Core Properties
        $this->assertSame('Mark Baker', $properties->getCreator());
        $this->assertSame('Unit Testing', $properties->getTitle());
        $this->assertSame('Property Test', $properties->getSubject());
        // Extended Properties
        $this->assertSame('PHPOffice', $properties->getCompany());
        $this->assertSame('The Big Boss', $properties->getManager());
        // Custom Properties
        $customProperties = $properties->getCustomProperties();
        $this->assertInternalType('array', $customProperties);
        $customProperties = array_flip($customProperties);
        $this->assertArrayHasKey('Publisher', $customProperties);
        $this->assertTrue($properties->isCustomPropertySet('Publisher'));
        $this->assertSame(Properties::PROPERTY_TYPE_STRING, $properties->getCustomPropertyType('Publisher'));
        $this->assertSame('PHPOffice Suite', $properties->getCustomPropertyValue('Publisher'));
    }

    public function testLoadXlsxRowColumnAttributes()
    {
        $filename = './data/Reader/XLSX/rowColumnAttributeTest.xlsx';
        $reader = new Xlsx();
        $spreadsheet = $reader->load($filename);

        $worksheet = $spreadsheet->getActiveSheet();
        for ($row = 1; $row <= 4; ++$row) {
            $this->assertEquals($row * 5 + 10, floor($worksheet->getRowDimension($row)->getRowHeight()));
        }

        $this->assertFalse($worksheet->getRowDimension(5)->getVisible());

        for ($column = 1; $column <= 4; ++$column) {
            $columnAddress = Coordinate::stringFromColumnIndex($column);
            $this->assertEquals(
                $column * 2 + 2,
                floor($worksheet->getColumnDimension($columnAddress)->getWidth())
            );
        }

        $this->assertFalse($worksheet->getColumnDimension('E')->getVisible());
    }

    /**
     * Test load Xlsx file without cell reference.
     */
    public function testLoadXlsxWithoutCellReference()
    {
        $filename = './data/Reader/XLSX/without_cell_reference.xlsx';
        $reader = new Xlsx();
        $reader->load($filename);
    }

    /**
     * Test load Xlsx file and use a read filter.
     */
    public function testLoadWithReadFilter()
    {
        $filename = './data/Reader/XLSX/without_cell_reference.xlsx';
        $reader = new Xlsx();
        $reader->setReadFilter(new OddColumnReadFilter());
        $data = $reader->load($filename)->getActiveSheet()->toArray();
        $ref = [1.0, null, 3.0, null, 5.0, null, 7.0, null, 9.0, null];

        for ($i = 0; $i < 10; ++$i) {
            $this->assertEquals($ref, \array_slice($data[$i], 0, 10, true));
        }
    }

    /**
     * Test load Xlsx file with drawing having double attributes.
     */
    public function testLoadXlsxWithDoubleAttrDrawing()
    {
        if (version_compare(PHP_VERSION, '7.0.0', '<')) {
            $this->markTestSkipped('Only handled in PHP version >= 7.0.0');
        }
        $filename = './data/Reader/XLSX/double_attr_drawing.xlsx';
        $reader = new Xlsx();
        $reader->load($filename);
    }

    /**
     * Test correct save and load xlsx files with empty drawings.
     * Such files can be generated by Google Sheets.
     */
    public function testLoadSaveWithEmptyDrawings()
    {
        $filename = __DIR__ . '/../../data/Reader/XLSX/empty_drawing.xlsx';
        $reader = new Xlsx();
        $excel = $reader->load($filename);
        $resultFilename = tempnam(File::sysGetTempDir(), 'phpspreadsheet-test');
        $writer = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($excel);
        $writer->save($resultFilename);
        $excel = $reader->load($resultFilename);
        // Fake assert. The only thing we need is to ensure the file is loaded without exception
        $this->assertNotNull($excel);
    }
}
